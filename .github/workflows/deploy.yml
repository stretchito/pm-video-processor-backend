name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 18

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Dependencies
        run: |
          echo "Installing dependencies in: $PWD"
          # Remove package-lock.json if it exists
          rm -f package-lock.json
          # Install dependencies and generate new package-lock.json
          npm install
        
      - name: Create env file
        run: |
          touch .env
          echo "PORT=10000" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
          echo "NODE_ENV=production" >> .env
        
      - name: Build Application
        run: |
          echo "Building application in: $PWD"
          npm run build
          echo "Build complete. Contents of dist:"
          ls -la dist/

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "Setting up SSH key..."
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H 161.35.137.136 >> ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean
        run: |
          # First, ensure the target directory exists
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no nodejs@161.35.137.136 << 'EOSSH'
            sudo mkdir -p /var/www/video-processor
            sudo chown -R nodejs:nodejs /var/www/video-processor
            mkdir -p /var/www/video-processor/logs
            chmod 777 /var/www/video-processor/logs
            
            # Create empty log files if they don't exist
            touch /var/www/video-processor/logs/combined.log
            touch /var/www/video-processor/logs/error.log
            touch /var/www/video-processor/logs/output.log
            chmod 666 /var/www/video-processor/logs/*.log
          EOSSH
          
          # Sync files
          rsync -azv --delete \
            -e "ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no" \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='src' \
            --exclude='.env' \
            ./ \
            nodejs@161.35.137.136:/var/www/video-processor/

          # Setup and start application
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no nodejs@161.35.137.136 << 'EOSSH'
            cd /var/www/video-processor
            
            echo "Setting up environment..."
            export NODE_ENV=production
            export DEBUG=express:*,app:*,video-processor:*
            
            echo "Checking Node.js installation..."
            node --version
            npm --version
            
            echo "Installing production dependencies..."
            rm -f package-lock.json
            npm install --production
            
            echo "Setting up PM2..."
            # Install PM2 globally with sudo
            sudo npm install pm2@latest -g || sudo npm install pm2 -g
            
            echo "Verifying PM2 installation..."
            which pm2
            pm2 --version
            
            echo "Verifying dist directory..."
            ls -la dist/
            
            echo "Setting up directories and permissions..."
            mkdir -p logs .pm2
            chmod 777 logs .pm2
            sudo chown -R nodejs:nodejs .
            
            echo "Configuring firewall..."
            sudo ufw allow 10000/tcp || true
            
            echo "Starting application with PM2..."
            export PM2_HOME="/var/www/video-processor/.pm2"
            
            # Stop existing processes
            pm2 delete all || true
            
            # Start with full logging
            pm2 start ecosystem.config.js \
              --time \
              --log logs/combined.log \
              --error logs/error.log \
              --output logs/output.log
            
            echo "Checking startup logs..."
            sleep 2
            cat logs/*.log || echo "No logs available yet"
            
            echo "Process status:"
            ps aux | grep node
            sudo lsof -i :10000 || true
            
            echo "PM2 process list:"
            pm2 list
            
            echo "Saving PM2 process list..."
            pm2 save
          EOSSH

      - name: Verify Deployment
        run: |
          echo "Waiting for application to start..."
          sleep 15  # Increased wait time
          for i in {1..5}; do
            echo "Attempt $i of 5..."
            if curl -s -f -m 10 http://161.35.137.136:10000/; then
              echo "Successfully connected to application"
              exit 0
            else
              echo "Connection failed. Checking logs..."
              ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no nodejs@161.35.137.136 "cd /var/www/video-processor && ls -la logs/ && cat logs/*.log 2>/dev/null || echo 'No logs available'"
              if [ $i -lt 5 ]; then
                echo "Waiting before next attempt..."
                sleep 10
              fi
            fi
          done
          exit 1

      - name: Notify on Success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "✅ Successfully deployed video-processor to production"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "❌ Failed to deploy video-processor to production"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}