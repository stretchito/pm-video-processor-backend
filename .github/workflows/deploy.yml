name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 18

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Create env file
        run: |
          touch .env
          echo "PORT=10000" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
          echo "NODE_ENV=production" >> .env
        
      - name: Build Application
        run: npm run build

      - name: Debug Environment
        run: |
          echo "GitHub Runner OS: ${{ runner.os }}"
          echo "GitHub Runner Architecture: ${{ runner.arch }}"
          echo "Droplet IP exists: ${{ secrets.DROPLET_IP != '' }}"
          echo "Deploy key length: ${#DEPLOY_KEY}"
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}

      - name: Configure SSH
        run: |
          # Create .ssh directory with correct permissions
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write deploy key with correct permissions
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Debug key content (first line only, for security)
          echo "Deploy key first line:"
          head -n 1 ~/.ssh/deploy_key
          
          # Write known_hosts
          echo "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Create SSH config
          cat > ~/.ssh/config << EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
            LogLevel DEBUG3
          EOF
          chmod 600 ~/.ssh/config
          
          # Verify SSH files
          ls -la ~/.ssh/
          
          # Debug SSH key format
          echo "SSH key format:"
          ssh-keygen -l -f ~/.ssh/deploy_key || echo "Invalid key format"

      - name: Test Basic SSH Connection
        run: |
          echo "Testing basic SSH connectivity..."
          ssh -v -i ~/.ssh/deploy_key root@${{ secrets.DROPLET_IP }} 'echo "Connection test"' || {
            echo "SSH connection failed"
            exit 1
          }

      - name: Verify Target Directory
        run: |
          echo "Verifying target directory..."
          ssh -i ~/.ssh/deploy_key root@${{ secrets.DROPLET_IP }} '
            if [ ! -d "/var/www/video-processor" ]; then
              echo "Creating /var/www/video-processor"
              mkdir -p /var/www/video-processor
              chown -R root:root /var/www/video-processor
              chmod -R 755 /var/www/video-processor
            fi
          '

      - name: Deploy to DigitalOcean
        run: |
          echo "Starting deployment..."
          
          echo "Running rsync..."
          rsync -avz --delete \
            -e "ssh -v -i ~/.ssh/deploy_key" \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='.env' \
            dist/ package*.json ecosystem.config.js \
            root@${{ secrets.DROPLET_IP }}:/var/www/video-processor/

          echo "Executing remote commands..."
          ssh -v -i ~/.ssh/deploy_key root@${{ secrets.DROPLET_IP }} << 'EOSSH'
            set -ex
            cd /var/www/video-processor || {
              echo "Failed to change directory"
              exit 1
            }
            
            echo "Installing dependencies..."
            npm ci --production || {
              echo "Failed to install dependencies"
              exit 1
            }
            
            echo "Starting/reloading PM2..."
            if pm2 list | grep -q "video-processor"; then
              pm2 reload ecosystem.config.js --update-env || {
                echo "Failed to reload PM2"
                exit 1
              }
            else
              pm2 start ecosystem.config.js || {
                echo "Failed to start PM2"
                exit 1
              }
            fi
            
            echo "Reloading nginx..."
            sudo systemctl reload nginx || {
              echo "Failed to reload nginx"
              exit 1
            }
          EOSSH

      - name: Verify Deployment
        run: |
          sleep 10
          curl --fail --retry 3 --retry-delay 5 http://${{ secrets.DROPLET_IP }}:10000 || exit 1

      - name: Notify on Success
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "✅ Successfully deployed video-processor to production"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
          slack-message: "❌ Failed to deploy video-processor to production"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}